import type { ShikiTransformer } from 'shiki';
import type { ErrorPayload } from 'vite';
import type { ModuleLoader } from '../../module-loader/index.js';
import { type ErrorWithMetadata } from '../errors.js';
import type { SSRLoadedRenderer } from './../../../@types/astro.js';
export declare function enhanceViteSSRError({ error, filePath, loader, renderers, }: {
    error: unknown;
    filePath?: URL;
    loader?: ModuleLoader;
    renderers?: SSRLoadedRenderer[];
}): Error;
export interface AstroErrorPayload {
    type: ErrorPayload['type'];
    err: Omit<ErrorPayload['err'], 'loc'> & {
        name?: string;
        title?: string;
        hint?: string;
        docslink?: string;
        highlightedCode?: string;
        loc?: {
            file?: string;
            line?: number;
            column?: number;
        };
        cause?: unknown;
    };
}
/**
 * Generate a payload for Vite's error overlay
 */
export declare function getViteErrorPayload(err: ErrorWithMetadata): Promise<AstroErrorPayload>;
/**
 * Transformer for `shiki`'s legacy `lineOptions`, allows to add classes to specific lines
 * FROM: https://github.com/shikijs/shiki/blob/4a58472070a9a359a4deafec23bb576a73e24c6a/packages/transformers/src/transformers/compact-line-options.ts
 * LICENSE: https://github.com/shikijs/shiki/blob/4a58472070a9a359a4deafec23bb576a73e24c6a/LICENSE
 */
export declare function transformerCompactLineOptions(lineOptions?: {
    /**
     * 1-based line number.
     */
    line: number;
    classes?: string[];
}[]): ShikiTransformer;
